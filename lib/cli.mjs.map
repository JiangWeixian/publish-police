{"version":3,"file":"cli.mjs","sources":["../src/lib.ts","../src/cli.ts"],"sourcesContent":["import { readJson } from 'fs-extra'\nimport type { PackageJson } from 'type-fest'\nimport { globby } from 'globby'\n\ntype Options = {\n  cwd?: string\n}\n\n// https://docs.npmjs.com/cli/v8/configuring-npm/package-json#files\nconst DefaultIgnore = [\n  '.git',\n  'CVS',\n  '.svn',\n  '.hg',\n  '.lock-wscript',\n  '.wafpickle-N',\n  '.*.swp',\n  '.DS_Store',\n  '._*',\n  'npm-debug.log',\n  '.npmrc',\n  'node_modules',\n  'config.gypi',\n  '*.orig',\n  'package-lock.json',\n  'node_modules',\n]\n\nexport const glob = async (files: string[], options: Options = { cwd: process.cwd() }) => {\n  const results = await Promise.all(\n    files.map((file) =>\n      globby(file, {\n        ignore: DefaultIgnore,\n        ignoreFiles: ['.npmignore'],\n        gitignore: true,\n        dot: true,\n        ...options,\n      }),\n    ),\n  )\n  return results\n}\n\nexport const distCheck = async ({\n  strict = true,\n  cwd = process.cwd(),\n}: Options & { strict?: boolean }) => {\n  let files: string[] = []\n  try {\n    const config: PackageJson = await readJson(`${cwd}/package.json`)\n    files = config.files ?? []\n  } catch (_) {\n    throw new Error('package.json not found!')\n  }\n  if (files.length === 0 && strict) {\n    throw new Error('files in package.json not found!')\n  }\n  // in non-strict mode, empty files is allowed\n  // npm will always upload files in current directory\n  if (files.length === 0 && !strict) {\n    return true\n  }\n  const results = await glob(files, { cwd })\n  for (const [index, pattern] of files.entries()) {\n    if (!results[index].length) {\n      throw new Error(\n        `\\`${pattern}\\` looks like empty or not exit! Maybe you add it in ignore files or build failed?`,\n      )\n    }\n  }\n  return true\n}\n","import cac from 'cac'\nimport { distCheck } from './lib'\n\nconst cli = cac()\n\ncli\n  .command('')\n  .option('--strict', 'Choose a project type', {\n    default: true,\n  })\n  .action((options) => {\n    distCheck({ strict: options.strict })\n  })\n\ncli.parse()\n"],"names":[],"mappings":";;;;AAEA,MAAM,aAAa,GAAG;AACtB,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,eAAe;AACjB,EAAE,cAAc;AAChB,EAAE,QAAQ;AACV,EAAE,WAAW;AACb,EAAE,KAAK;AACP,EAAE,eAAe;AACjB,EAAE,QAAQ;AACV,EAAE,cAAc;AAChB,EAAE,aAAa;AACf,EAAE,QAAQ;AACV,EAAE,mBAAmB;AACrB,EAAE,cAAc;AAChB,CAAC,CAAC;AACK,MAAM,IAAI,GAAG,OAAO,KAAK,EAAE,OAAO,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,KAAK;AACvE,EAAE,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;AACrE,IAAI,MAAM,EAAE,aAAa;AACzB,IAAI,WAAW,EAAE,CAAC,YAAY,CAAC;AAC/B,IAAI,SAAS,EAAE,IAAI;AACnB,IAAI,GAAG,EAAE,IAAI;AACb,IAAI,GAAG,OAAO;AACd,GAAG,CAAC,CAAC,CAAC,CAAC;AACP,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AACK,MAAM,SAAS,GAAG,OAAO;AAChC,EAAE,MAAM,GAAG,IAAI;AACf,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE;AACrB,CAAC,KAAK;AACN,EAAE,IAAI,KAAK,GAAG,EAAE,CAAC;AACjB,EAAE,IAAI;AACN,IAAI,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;AACzD,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;AAC/B,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;AAC/C,GAAG;AACH,EAAE,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,EAAE;AACpC,IAAI,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;AACxD,GAAG;AACH,EAAE,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;AACrC,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;AAC7C,EAAE,KAAK,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;AAClD,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE;AAChC,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,kFAAkF,CAAC,CAAC,CAAC;AACxH,KAAK;AACL,GAAG;AACH,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;;ACpDD,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC;AAClB,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,uBAAuB,EAAE;AAC5D,EAAE,OAAO,EAAE,IAAI;AACf,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,KAAK;AACvB,EAAE,SAAS,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC;AACH,GAAG,CAAC,KAAK,EAAE"}